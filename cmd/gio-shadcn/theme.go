package main

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"
)

var themeCmd = &cobra.Command{
	Use:   "theme",
	Short: "Generate theme files from configuration",
	Long: `Generate theme files from theme.json configuration.

This command:
- Reads theme.json from the current directory
- Generates Go constants for colors
- Creates theme files in the theme directory
- Validates theme configuration

Examples:
  gio-shadcn theme                    # Generate theme from theme.json
  gio-shadcn theme --config custom.json  # Use custom config file`,
	RunE: func(cmd *cobra.Command, _ []string) error {
		configFile, _ := cmd.Flags().GetString("config")
		return generateTheme(configFile)
	},
}

func init() {
	themeCmd.Flags().StringP("config", "c", "theme.json", "Path to theme configuration file")
}

const (
	defaultThemeDir = "theme"
)

func generateTheme(configFile string) error {
	// Check if config file exists
	if _, err := os.Stat(configFile); os.IsNotExist(err) {
		return fmt.Errorf("theme configuration file not found: %s", configFile)
	}

	fmt.Printf("üé® Generating theme from: %s\n", configFile)

	// Create theme directory if it doesn't exist
	themeDir := defaultThemeDir
	if err := os.MkdirAll(themeDir, 0750); err != nil {
		return fmt.Errorf("failed to create theme directory: %w", err)
	}

	// Download theme files if they don't exist
	themeFiles := []string{"theme.go", "colors.go", "typography.go", "spacing.go", "generator.go"}

	for _, file := range themeFiles {
		filePath := filepath.Join(themeDir, file)
		if _, err := os.Stat(filePath); os.IsNotExist(err) {
			fmt.Printf("üì• Downloading theme file: %s\n", file)
			if err := downloadThemeFile(file, filePath); err != nil {
				return fmt.Errorf("failed to download theme file %s: %w", file, err)
			}
		}
	}

	// Generate constants from theme.json
	if err := generateThemeConstants(configFile, themeDir); err != nil {
		return fmt.Errorf("failed to generate theme constants: %w", err)
	}

	fmt.Printf("‚úÖ Theme generated successfully!\n")
	fmt.Printf("üìÅ Theme files created in: %s\n", themeDir)
	fmt.Printf("üîß You can now import and use your theme:\n")
	fmt.Printf("   import \"%s/theme\"\n", getCurrentModuleNameSafe())

	return nil
}

func downloadThemeFile(fileName, destPath string) error {
	url := fmt.Sprintf("https://raw.githubusercontent.com/bnema/gio-shadcn/main/theme/%s", fileName)
	return downloadFile(url, destPath)
}

func generateThemeConstants(_, themeDir string) error {
	// This is a placeholder - in a real implementation, you would:
	// 1. Parse the theme.json file
	// 2. Use the theme generator to create constants
	// 3. Write the generated constants to a file

	// For now, let's create a simple generated file
	generatedContent := `// Code generated by gio-shadcn theme generator. DO NOT EDIT.

package theme

import "image/color"

// Generated theme constants
var (
	// Add generated constants here based on theme.json
	// This is a placeholder - the actual implementation would
	// parse theme.json and generate these constants
)
`

	generatedFile := filepath.Join(themeDir, "generated.go")
	if err := os.WriteFile(generatedFile, []byte(generatedContent), 0600); err != nil {
		return fmt.Errorf("failed to write generated constants: %w", err)
	}

	fmt.Printf("üìù Generated theme constants in: %s\n", generatedFile)
	return nil
}

func getCurrentModuleNameSafe() string {
	if name, err := getCurrentModuleName(); err == nil {
		return name
	}
	return "your-module"
}
